version: '3'
# TODO: change project name

services:
  project_db:
    container_name: "project_db"
    image: postgres
    environment:
      POSTGRES_PASSWORD: $PGPASSWORD
      POSTGRES_DB: $PGDATABASE
    shm_size: '512m'
    restart: always
    networks:
      - db_network
    volumes:
      - pgdata_volume:/var/lib/postgresql/data/
      - ./postgres/dump:/dump
      - ./postgres/init:/docker-entrypoint-initdb.d

  project_redis:
    container_name: "project_redis"
    image: redis
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - redis_network
    volumes:
      - redis_volume:/data
    restart: always

  project_app:
    container_name: "project_app"
    env_file: you_need.env
    build:
      context: ./app
      dockerfile: Dockerfile
    image: project_app
    command: /code/entrypoint.sh
    tty: true
    expose:
      - 8080
    restart: always
    networks:
      - db_network
      - redis_network
      - nginx_network
    volumes:
      - ./app:/code
      - static_volume:/code/static
      - media_volume:/code/media
    depends_on:
      - project_db
      - project_redis

  project_nginx:
    container_name: "project_nginx"
    image: nginx
    entrypoint: /code/run_nginx.sh
    environment:
      - VIRTUAL_HOST=project.localhost
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.project_nginx-https.rule=Host("$VIRTUAL_HOST")'
      - 'traefik.http.routers.project_nginx-https.tls.certresolver=httpchallenge_0'
      - 'traefik.http.routers.project_nginx-http.rule=Host("$VIRTUAL_HOST")'
      - 'traefik.http.routers.project_nginx-http.middlewares=redirect_middleware'
      - 'traefik.http.middlewares.redirect_middleware.redirectscheme.scheme=https'
    expose:
      - 80
    # For testing and environment without traefik
    ports:
      - "8000:80"
    restart: always
    networks:
      - traefik_network
      - nginx_network
    volumes:
      - ./nginx:/code
      - static_volume:/django/static
      - media_volume:/django/media
    depends_on:
      - project_app

  project_celery:
    container_name: project_celery
    image: project_app
    env_file: you_need.env
    command: celery -A configs.celery_init worker -l info
    restart: always
    networks:
      - db_network
      - redis_network
    volumes:
      - ./app:/code
    depends_on:
      - project_db
      - project_redis
      - project_app

  project_celery-beat:
    container_name: project_celery-beat
    image: project_app
    env_file: you_need.env
    command: celery -A configs.celery_init beat -l info
    restart: always
    networks:
      - db_network
      - redis_network
    volumes:
      - ./app:/code
    depends_on:
      - project_db
      - project_redis
      - project_app


networks:
  traefik_network:
    external:
      name: traefik_network
  db_network:
    driver: bridge
  redis_network:
    driver: bridge
  nginx_network:
    driver: bridge

volumes:
  pgdata_volume:
  redis_volume:
  static_volume:
  media_volume: